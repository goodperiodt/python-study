'''

* 집합의 연산
** 좌항과 우항이 집합일 경우 논리연산에 쓰이는 |와 &는 합집합과 교집합의 기능이 된다.
1. 합집합(|): 두 집합의 전체 요소들의 모음 (중복 제거) -> union(), a.update(b)
2. 교집합(&): 두 집합의 중복을 배제한 공통 요소들의 모음. -> a.intersection(b)
3. 차집합(-): 왼쪽 집합에서 오른쪽 집합 요소를 제거 -> difference()
4. 배타적 차집합(^) -- 캐럿기호 : 합집합 - 교집합 --> symmetric_difference_update()
5. 부분집합 (<=): 왼쪽 집합이 오른쪽 집합의 부분집합인지를 검사. --> a.issubset()
a가 b에 속해 있는가?

'''

A = {2, 4, 6, 8, 10, 12}
B = {3, 6, 9, 12, 15}

print('교집합:', A & B)
print('합집합:', A | B) # A와 B를 합치되 두 집합에 겹치는 데이터는 중복이 아닌 하나의 값만을 반환한다.
print('차집합(A-B):', A - B)
print('차집합(B-A):', B - A)
print('배타적 차집합:', A ^ B)

C = {4, 8, 12}
print(C <= A) # C{8, 4, 12}가 A에 속하니?
# True라면 print(C & A)의 결과가 곧 C의 값이다.
# C가 A에 속해있니? 

print(C <= B)

